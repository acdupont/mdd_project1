#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
MDD Project 1 Report
\end_layout

\begin_layout Author
Team 1
\begin_inset Newline newline
\end_inset

Anthony DuPont, Clayton Marriott, Jordon Dornbos
\end_layout

\begin_layout Section
Project Restated
\end_layout

\begin_layout Subsection
Problem Definition
\end_layout

\begin_layout Standard
Youth soccer leagues can be difficult to organize when you have kids of
 varying skill, age, etc.
 The 
\begin_inset Quotes eld
\end_inset

Team Creator
\begin_inset Quotes erd
\end_inset

 builds teams according to specific criteria, and organizes the given data
 in an intuitive way.
\end_layout

\begin_layout Subsubsection
Functionality Provided
\end_layout

\begin_layout Enumerate
Teams are created with skill level in mind.
 Players are ranked on a scale of 0-4.
\end_layout

\begin_layout Enumerate
Players are assigned a team based on age range, with the following ranges
 available: 8-9, 10-11, 12-13, 14-15, and 16-18.
\end_layout

\begin_layout Subsubsection
Functionality Not Provided
\end_layout

\begin_layout Enumerate
The addresses of the players are not tracked.
\end_layout

\begin_layout Enumerate
Proximity of players' addresses does not influence team creation.
\end_layout

\begin_layout Subsection
Model Creation
\end_layout

\begin_layout Subsubsection
Signatures
\end_layout

\begin_layout Standard
The following signatures are defined in our model: 
\end_layout

\begin_layout Itemize
Gender: each Person has a gender (MALE or FEMALE).
 Declared with 
\emph on
enum.
\end_layout

\begin_layout Itemize
Person: the overarching person signature.
 Declared as 
\emph on
abstract
\emph default
 because Player is logical extension of it.
\end_layout

\begin_layout Itemize
Player: extends Person.
 
\end_layout

\begin_layout Itemize
MalePlayer: extends Player.
 A specific atom type for males.
\end_layout

\begin_layout Itemize
FemalePlayer: extends Player.
 A specific atom type for females.
\end_layout

\begin_layout Itemize
Team: contains sets of male and female players.
\end_layout

\begin_layout Itemize
League: a grouping of teams.
\end_layout

\begin_layout Subsubsection
Relations between Signatures
\end_layout

\begin_layout Itemize
Person: mapped to Gender.
\end_layout

\begin_layout Itemize
Team: mapped to a set of MalePlayer, and a set of FemalePlayer.
\end_layout

\begin_layout Itemize
League: mapped to a set of Team.
\end_layout

\begin_layout Subsubsection
Multiplicities
\end_layout

\begin_layout Standard
We have primarily used 
\emph on
one 
\emph default
in our relations because it only makes sense for those fields to be mapped
 to one object.
 For example, the gender field.
\end_layout

\begin_layout Subsubsection
Visualization
\end_layout

\begin_layout Standard
The first design was fairly simple, but did not have very much in the way
 of controlling logic.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/clayton/Desktop/Screen Shot 2014-07-31 at 10.31.10 PM.png
	width 50page%

\end_inset


\begin_inset Newline newline
\end_inset

The second diagram shows the much-improved second version.
 There were still some issues with logic, but the resut is at the least
 much prettier.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename /Users/clayton/Desktop/Screen Shot 2014-07-31 at 10.32.11 PM.png
	width 50page%

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

The final version is not as pretty, but is logically easier to follow and
 has cut out much of the redundant information that really wasn't needed
 in the model.
\end_layout

\begin_layout Subsection
Scope-Based Model Checking
\end_layout

\begin_layout Subsubsection
Facts
\end_layout

\begin_layout Enumerate

\emph on
fact { all p: Player | one t : Team | p in getPlayers[t] } 
\emph default
= Players can only be part of one team.
 It is not an assertion because it must always be true; we do not want to
 check if it is true or false, because the way our model operates it is
 assumed to be always true.
\end_layout

\begin_layout Enumerate

\emph on
fact { all m: MalePlayer | isMale [m] }
\emph default
 = Male players are defined as male.
 This is not an assertion because this should always be true.
 Examples/counterexamples should not test this fact.
\end_layout

\begin_layout Subsubsection
Assertions
\end_layout

\begin_layout Enumerate

\emph on
assert { all t: Team | one l: League | t in l.teams }
\emph default
 = All teams are in a league.
 
\end_layout

\begin_layout Enumerate

\emph on
assert { all t: Team | countMales [t] = countFemales [t] }
\emph default
 = Every team has an equal number of males and females.
\end_layout

\begin_layout Subsubsection
Functions
\end_layout

\begin_layout Enumerate

\emph on
fun countMales (t: Team) : Int
\emph default
 = Returns the number of male players on the given team.
\end_layout

\begin_layout Enumerate

\emph on
fun countFemales (t: Team) : Int
\emph default
 = Returns the number of female players on the given team.
\end_layout

\begin_layout Subsubsection
Predicates
\end_layout

\begin_layout Enumerate

\emph on
pred isMale (p: Player)
\emph default
 = Returns true if the given player is male.
 Used in the 
\begin_inset Quotes eld
\end_inset

all male players are male
\begin_inset Quotes erd
\end_inset

 fact.
\end_layout

\begin_layout Enumerate

\emph on
pred isFemale (p: Player)
\emph default
 = Returns true if the given player is female.
 Used in the 
\begin_inset Quotes eld
\end_inset

all female players are female
\begin_inset Quotes erd
\end_inset

 fact.
\end_layout

\begin_layout Subsubsection
Scope Check
\end_layout

\begin_layout Standard
Larger scopes like 32 and 40 work because there are 4 teams and need at
 least 4 boys and girls on each team.
 Scopes smaller than this do not because there are not enough kids to satisfy
 the requirements.
\end_layout

\end_body
\end_document
